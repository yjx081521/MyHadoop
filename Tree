一、插入节点：左大右小
二、遍历二叉树
1、前序遍历：访问顺序：根节点，左子树，右子树
2、中序遍历：访问顺序：左子树，根节点，右子树
3、后续遍历：访问顺序：左子树，右子树，根节点

三、删除节点
三个情况
1、该节点是叶子节点
2、一个子节点，直接改变父节点的引用
3、两个子节点，中序后继找到一节点将该节点替代

四、红黑树
1、明确二叉树问题：可以快速插入，查询和删除，但是插入的是有序数据，速度变得特别慢
2、平衡树和非平衡树
插入有序的数据，平衡树
插入无序的数据，非平衡树

3、红黑规则
1）节点非黑即红
2）根节点是黑色
3）若一节点是红色，那他的子节点必是黑色
4）从根节点到叶节点的每条路径，都必须包含相同数目的黑色节点

4、纠正违规的树
1）改变节点的颜色
2）执行旋转的操作（左旋或右旋）

五、其他
5、B树：存储效率高，查询效率低——数据库索引
6、Huffman树：带权外路径长度最小的二叉树，也成最优二叉树；Huffman编码是数据压缩技术中一种无损压缩编码。
树的遍历规则主要有两种：先根次序遍历和后根次序遍历。

树的存储结构：一棵树包含个结点间的层次关系与兄弟关系，两种关系的存储结构不同；树的层次关系，必须采用链式存储结构存储，
通过链连接父母结点和孩子结点；一个结点的多个孩子结点（互称兄弟）之间是线性关系，可以采用顺序存储结构或链式存储结构存储。
